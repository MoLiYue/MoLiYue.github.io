{"meta":{"title":"MoLiYue's Blogs","subtitle":"","description":"","author":"Mo Lin","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2023-10-21T15:11:41.000Z","updated":"2023-10-21T15:12:05.203Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-10-21T15:07:01.000Z","updated":"2023-10-21T15:07:42.811Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-10-21T01:13:14.000Z","updated":"2023-10-21T15:32:02.060Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""}],"posts":[{"title":"Set up my own VPS","slug":"Build-my-own-VPS","date":"2024-04-01T12:38:23.000Z","updated":"2024-04-12T06:35:11.077Z","comments":true,"path":"2024/04/01/Build-my-own-VPS/","link":"","permalink":"http://example.com/2024/04/01/Build-my-own-VPS/","excerpt":"","text":"My first try to access google is to set up VPS, but at that time I’m so naive. Today, after several years of learning, I come back again. Virtual Private Server (VPS)I choose Vultr as the operator(?), as I used it at the very beginning and I have the account. Then choose the cheapest ?(方案). x-uiI don’t want to spend a lot of time on setting up the server. As the result, I chose x-ui. https://mindsers.blog/en/post/https-using-nginx-certbot-docker/ (架设双栈代理服务器通过 IPv6 绕过校园网计费系统的方法)[https://blog.arisa.moe/blog/2022/220602-ipv6-bypass-billing-system/#225]","categories":[],"tags":[]},{"title":"C的小知识（一）Flexible array","slug":"C的小知识（一）","date":"2024-03-18T13:42:59.000Z","updated":"2024-03-20T13:00:04.687Z","comments":true,"path":"2024/03/18/C的小知识（一）/","link":"","permalink":"http://example.com/2024/03/18/C%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"Referenceflexible struct arrary as a memeber of another struct Is using flexible array memebers in C bad practice? My summary on Flexible arrayWhat is a flexible array?1234567891011/** * struct ethtool_sfeatures - command to request change in device&#x27;s features * @cmd: command number = %ETHTOOL_SFEATURES * @size: array size of the features[] array * @features: feature change masks */struct ethtool_sfeatures &#123; __u32 cmd; __u32 size; struct ethtool_set_features_block features[];&#125;; struct ethtool_set_features_block features[] is a flexible array. is NOT a pointer, it is an in place array which is contiguous with the struct. How to init a flexible array?123456789struct Header &#123; size_t d; long v[];&#125;;typedef struct Header Header;size_t n = 123; // can dynamically change during program execution// ...Header *h = malloc(sizeof(Header) + sizeof(long[n]));h-&gt;n = n; Or: 1Header *h = malloc(sizeof *h + n * sizeof h-&gt;v[0]); Note that sizeof(Header) includes eventual padding bytes, thus, the following allocation is incorrect and may yield a buffer overflow: 1Header *h = malloc(sizeof(size_t) + sizeof(long[n])); // invalid! My example code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include &lt;errno.h&gt;#include &lt;linux/ethtool.h&gt;#include &lt;linux/if.h&gt;#include &lt;linux/sockios.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;sys/ioctl.h&gt;#include &lt;unistd.h&gt;#define ETHTOOL_DEV_FEATURE_WORDS 2static void ethnl_features_to_bitmap32(__u32 *dest, __u64 src) &#123; unsigned int i; for (i = 0; i &lt; ETHTOOL_DEV_FEATURE_WORDS; i++) &#123; dest[i] = src &gt;&gt; (32 * i); &#125;&#125;static int init_struct() &#123; int sockfd; struct ifreq ifr; // struct ethtool_sfeatures cmd; struct ethtool_sfeatures *cmd = malloc(sizeof *cmd + ETHTOOL_DEV_FEATURE_WORDS * sizeof cmd-&gt;features[0]); if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0) &#123; printf(&quot;socket error\\n&quot;); return -1; &#125; strcpy(ifr.ifr_name, &quot;net0&quot;); printf(&quot;printf ifr_name: %s \\n&quot;, ifr.ifr_name); cmd-&gt;cmd = ETHTOOL_SFEATURES; cmd-&gt;size = ETHTOOL_DEV_FEATURE_WORDS; __u32 valid[ETHTOOL_DEV_FEATURE_WORDS]; __u64 features = (1UL &lt;&lt; 9); ethnl_features_to_bitmap32(valid, features); for (int i = 0; i &lt; ETHTOOL_DEV_FEATURE_WORDS; i++) &#123; cmd-&gt;features[i].valid = valid[i]; cmd-&gt;features[i].requested = 0; &#125; printf(&quot;printf ifr_name: %s \\n&quot;, ifr.ifr_name); ifr.ifr_data = (char *)cmd; printf(&quot;printf ifr_name: %s \\n&quot;, ifr.ifr_name); if (ioctl(sockfd, SIOCETHTOOL, &amp;ifr) &lt; 0) &#123; printf(&quot;ioctl error: %d\\n&quot;, errno); close(sockfd); free(cmd); return -1; &#125; close(sockfd); free(cmd); return -1;&#125;static int get_features() &#123; int sockfd; struct ifreq ifr; struct ethtool_gfeatures *cmd = malloc(sizeof *cmd + ETHTOOL_DEV_FEATURE_WORDS * sizeof cmd-&gt;features[0]); if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0) &#123; printf(&quot;socket error\\n&quot;); return -1; &#125; strcpy(ifr.ifr_name, &quot;enp2s0&quot;); cmd-&gt;cmd = ETHTOOL_GFEATURES; cmd-&gt;size = ETHTOOL_DEV_FEATURE_WORDS; ifr.ifr_data = (char *)cmd; if (ioctl(sockfd, SIOCETHTOOL, &amp;ifr) &lt; 0) &#123; printf(&quot;ioctl error: %d\\n&quot;, errno); close(sockfd); free(cmd); return -1; &#125; close(sockfd); free(cmd); return -1;&#125;int main(int argc, char *argv[]) &#123; init_struct(); // get_features(); return EXIT_SUCCESS;&#125;","categories":[],"tags":[{"name":"C","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"ArchLinux","slug":"ArchLinux","date":"2024-03-12T15:01:02.000Z","updated":"2024-06-10T12:48:29.707Z","comments":true,"path":"2024/03/12/ArchLinux/","link":"","permalink":"http://example.com/2024/03/12/ArchLinux/","excerpt":"","text":"Here collect some expirences on installing ArchLinux. Manual install ArchLinuxIt’s not preferred as it is not esay for a beginner to understand all the commands, but if just following the steps everyone should make it. Manual install mainly reference to ArchLinuxStudio.github.io All the info I added here is a addition for my reference web. Preparation for installationPrepare iso fileI will not introduce how to prepare iso file, I thought it too familiar for me. Prepare networkReally recommand you prepare a global proxy network, as it will really reduce the apperance of the issue. InstalltionPatch 1Use fat32 format efi. Use btrsf? format root and home. Patch 2Automaticaly install ArchLinuxUse archinstall, please use global proxy! HyprlandI used to use KDE, gnome, i3wm, awesome wm, dwm(not fully tried till now), as I am on X11 with Nvidia Card, and now I try to use hyprland with AMD! Hyprland is not offically support on ArchLinux, packets on default registry or AUR is out of date and not usable. As the result, I added the archlinuxcn registry and get the package from it. Or perhaps you can get it from github and build it yourself. I tried to build it myself at the beginning, but there are some depencies on hyprlang, hyprcursor for hyprland. Once you build by yourself, you need to build all of them by yourself. It’s really a tough work to input all the commands manually instead of paste them from webset. I plan to wirte a script to install all the things from a CLI archlinux to a GUI archlinux with hyprland. For others, I’ll suggest them using KDE. fcitx5 on hyprlandFcitx5 works! 123456789windowrule=pseudo,fcitxexec-once=fcitx5-remote -rexec-once=fcitx5 -d --replaceexec-once=fcitx5-remote -renv = GTK_IM_MODULE,fcitxenv = QT_IM_MODULE,fcitxenv = XMODIFIERS,@im=fcitx Stream on hyprland1yay -S obs-studio Hyprland Desktop Portal Hyprland Desktop Portal will not start automaticaly! Please using the script mentioned in the web. Icons on hyprlandPlease install awesome fonts 5 1yay -S ttf-font-awesome-5 Also add FontAwesome fonts to config files. 12345/usr/share/fonts/awesome-terminal-fonts/pomicons-regular.ttf: Pomodoro:style=Regular/usr/share/fonts/awesome-terminal-fonts/fontawesome-regular.ttf: FontAwesome:style=Regular/usr/share/fonts/TTF/fontawesome.ttf: FontAwesome:style=Regular/usr/share/fonts/awesome-terminal-fonts/devicons-regular.ttf: icomoon:style=Regular/usr/share/fonts/awesome-terminal-fonts/octicons-regular.ttf: octicons:style=Medium Waybar on hyprland1yay -S waybar I think I can even seprate a chapter for waybar, but I didn’t. There are a lot of things for waybar, if you want to config it by yourself. Waybar automaticaly loading configAutomatically restart waybar after config change My script, and please install yay -S inotify-tools first. I keep this script in the hyprland directory. 1234567891011#!/bin/bashCONFIG_FILES=&quot;$HOME/.config/waybar/*&quot;trap &quot;killall waybar&quot; EXITwhile true; do waybar &amp; inotifywait -e create,modify $CONFIG_FILES killall waybardone Temperature on waybarI try to use s-tui to show the detail info. 1yay -S s-tui CPU temp not reading correctly mpd on hyprlandI haven’t used this app yet, and I’d like to have a try. 1yay -S mpd kitty with pillow1yay -S kitty python-pillow To solve and get images to preview in ranger in kitty, I did the following: Followed the instructions here: https://github.com/ranger/ranger/issues/1890 ranger --clean &lt;- cleans out your ranger config! Opened ranger via ranger Ran :set preview_images true Ran :set preview_images_method kitty wofi on hyprland1yay -S wofi","categories":[],"tags":[]},{"title":"gdb and lldb","slug":"gdb-and-lldb","date":"2024-03-05T14:42:29.000Z","updated":"2024-04-12T06:35:11.068Z","comments":true,"path":"2024/03/05/gdb-and-lldb/","link":"","permalink":"http://example.com/2024/03/05/gdb-and-lldb/","excerpt":"","text":"GDBSet break point in GDBSet a break point in a source filecmd: b file:function e.g. 1b debug.c:func Set a break point at a linecmd: b file:num e.g. 1b debug.c:7 Set a break point at an addresscmd: b *address e.g. 1b *0x0000000000000 Set condition break pointcmd: b file:num if cond e.g. 1b debug:10 if a=1 Set temp? breakcmd: tbreak Cc printf unsigned long long 1printf(&quot;%llu&quot;, 285212672);","categories":[],"tags":[]},{"title":"阅读","slug":"阅读","date":"2024-02-21T10:19:20.000Z","updated":"2024-02-21T10:21:00.561Z","comments":true,"path":"2024/02/21/阅读/","link":"","permalink":"http://example.com/2024/02/21/%E9%98%85%E8%AF%BB/","excerpt":"","text":"iOS阅读微软 Azure 学生认证+文字转语音（TTS）服务使用 源阅读","categories":[],"tags":[]},{"title":"一些不错的小软件","slug":"一些不错的小软件","date":"2024-02-21T10:16:57.000Z","updated":"2024-02-21T10:17:38.482Z","comments":true,"path":"2024/02/21/一些不错的小软件/","link":"","permalink":"http://example.com/2024/02/21/%E4%B8%80%E4%BA%9B%E4%B8%8D%E9%94%99%E7%9A%84%E5%B0%8F%E8%BD%AF%E4%BB%B6/","excerpt":"","text":"Windows迅雷 v11.3.6.1872 绿色便携版","categories":[],"tags":[]},{"title":"reveal.js使用简介","slug":"reveal-js使用简介","date":"2024-02-17T11:33:53.000Z","updated":"2024-02-21T10:17:41.412Z","comments":true,"path":"2024/02/17/reveal-js使用简介/","link":"","permalink":"http://example.com/2024/02/17/reveal-js%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/","excerpt":"","text":"docker reveal.js","categories":[],"tags":[]},{"title":"Work flow on MacOS","slug":"Work-flow-on-MacOS","date":"2024-02-14T14:15:49.000Z","updated":"2024-02-17T02:53:03.084Z","comments":true,"path":"2024/02/14/Work-flow-on-MacOS/","link":"","permalink":"http://example.com/2024/02/14/Work-flow-on-MacOS/","excerpt":"","text":"AstronvimInstall AstronvimAstronvim.com my-astronvim astronvim community lazygitthemecatppuccin tmuxtmux-plugin-manager","categories":[],"tags":[]},{"title":"PalWorld Server以及内网穿透","slug":"PalWorld-Server以及内网穿透","date":"2024-01-28T08:00:54.000Z","updated":"2024-03-06T15:41:04.582Z","comments":true,"path":"2024/01/28/PalWorld-Server以及内网穿透/","link":"","permalink":"http://example.com/2024/01/28/PalWorld-Server%E4%BB%A5%E5%8F%8A%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","excerpt":"","text":"最近PalWorld挺火的，看着也很好玩，我本来没想自己搭一个Dedicated Server，但是我和同学试了一下它的邀请码联机连不上，又想了想自己手上的资源，就打算自己搞个服务器联机玩了。 资源规划首先要根据手上现有的资源做规划。我本地有一个archlinux的小主机，前一阵子还入手了一年99的阿里云服务器，2 Core 2 GB RAM。 PalServer建议要4 Core 16GB RAM 或以上，显然直接把PalServer搭建在阿里云服务器上是不行的了，但是阿里云服务器有公网IP。 所以方案就出来了，用阿里云服务器做内网穿透，本地archlinux的小主机安装PalServer就可以了。 内网穿透我查到的开源的内网穿透的软件是frp，所以就用它了。frp分为frps和frpc，顾名思义frps是server端，frpc是client端。在云服务器上起server端，在本地小主机起client端。 server端server端配置：/etc/frps/frps.ini 这个位置是我自己决定下载放在这里的哈。 1234567[common]bind_port = 7000token = ************dashboard_port = 7500dashboard_user = ******dashboard_pwd = ****** client端client端配置：/usr/local/frpc/frpc.ini 这个位置是我自己决定下载放在这里的哈。 由于我也不知道它到底用不用tcp所以就把tcp也写上去了，看一般来说就只用udp即可。 12345678910111213141516171819202122232425262728293031323334353637[common]server_addr = ***.***.***.***server_port = 7000token = ********[palserver_udp]type = udplocal_ip = 127.0.0.1local_port = 8211remote_port = 8211use_encryption = falseuse_compression = false[palserver_tcp]type = tcplocal_ip = 127.0.0.1local_port = 8211remote_port = 8211use_encryption = falseuse_compression = false[RCON_tcp]type = tcplocal_ip = 127.0.0.1local_port = 25575remote_port = 25575use_encryption = falseuse_compression = false[RCON_UDP]type = udplocal_ip = 127.0.0.1local_port = 25575remote_port = 25575use_encryption = falseuse_compression = false frp配置-内网穿透工具最佳实践 frp 内网穿透, 认证配置,安全配置 TOKEN frp github PalServer部署我的小主机是Archlinux，打算用docker来跑PalServer。上Docker Hub上找了一下，选择了下载量最高的image，同时我还安装了docker compose，推荐使用。 PalServer docker hub jammsenPalServer docker hub thijsvanloef 在这个image里还包括RCON，虽然不懂但是还是配上了，感觉RCON可以在研究之后单分一个章节来介绍。 这部分感觉没什么说的，就按照这个image的介绍要求来搞就行，很简单、很省事。 TroubleShootingArchlinux上的docker配置只yay -S docker 等是不行的，如此安装只能用root用户启动docker，但是我是个人pc的linux，一般都会建立non-root用户来使用。需要手动将自己的用户加入docker用户组。 If you want to be able to run the docker CLI command as a non-root user, add your user to the docker user group, re-login, and restart docker.service. ArchWiki docker链接 1234sudo groupadd dockersudo usermod -aG docker $USER# then re-login and restart docker.service# or reboot the machine 上述内容的参考文献 同时我还想要docker自启动，所以还要设置service。 TBD 我要是没记错的话我安装完docker，docker默认是用的containerd，而不是docker.socket。这里可能需要自己填写一个service文件来指定docker使用哪个runtime。 service文件，这个也是参考ArchWiKi改的： 1234/etc/systemd/system/docker.service.d/docker.conf[Service]ExecStart=ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock ArchWiki docker链接 12345systemctl enable systemctl startsystemctl statussystemctl reload?jou log? ArchLinux上crontab使用PalServer具有不稳定性，大家在网上都在说PalWorld非常吃内存。我自己搭建的服务器也一样，一般3-4天就会炸掉一次，但还好是用的容器部署重启就很快。 但是游戏体验还是前两天还可以，后两天可能就会因为内存等问题出现各种奇怪的现象。所以我打算设置脚本每天自动重启一次PalServer。 自动重启我了解到的方案有两种，一个是在容器的image里配置定时重启；一个是在宿主机上配置定时重启。 容器自动重启参考资料 Linux的定时任务一般使用crontab来完成。但是ArchLinux没有预装crontab？我就安装了cronie。 安装cronie参考资料 如此一结合这个问题算是解决了。","categories":[],"tags":[{"name":"Game","slug":"Game","permalink":"http://example.com/tags/Game/"}]},{"title":"OpenWRT折腾记录","slug":"OpenWRT折腾记录","date":"2023-12-26T13:08:41.000Z","updated":"2024-02-10T11:22:51.580Z","comments":true,"path":"2023/12/26/OpenWRT折腾记录/","link":"","permalink":"http://example.com/2023/12/26/OpenWRT%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/","excerpt":"","text":"一直想试试自己编译一下openwrt，最近总算是搞到机会了。 我选择的是ImmortalWRT，没有选择去build最原始的OpenWRT。我之前在用的树莓派就是ImmortalWRT的版本，所以我就打算继续借用它来入门OpenWRT了。 环境我用的是Archlinux，安装了virtualbox，安装的ubuntu20.04虚拟机，给了100G的空间。 OpenWRT软件luci-app-onliner luci-app-mosdns Proxy基于 DNS 的内网透明代理分流方案 OpenClashClashMeta文档 OpenClash配置文件例子","categories":[],"tags":[]},{"title":"ranger常见命令","slug":"ranger常见命令","date":"2023-12-16T13:59:49.000Z","updated":"2023-12-16T13:59:49.549Z","comments":true,"path":"2023/12/16/ranger常见命令/","link":"","permalink":"http://example.com/2023/12/16/ranger%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"b站下载的视频与音频时常不一致","slug":"b站下载的视频与音频时常不一致","date":"2023-12-02T07:36:13.000Z","updated":"2023-12-02T07:41:53.527Z","comments":true,"path":"2023/12/02/b站下载的视频与音频时常不一致/","link":"","permalink":"http://example.com/2023/12/02/b%E7%AB%99%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%A7%86%E9%A2%91%E4%B8%8E%E9%9F%B3%E9%A2%91%E6%97%B6%E5%B8%B8%E4%B8%8D%E4%B8%80%E8%87%B4/","excerpt":"","text":"今天发现一个有趣的问题，b站下载的视频和音频时常是不一样的。 以前没注意，最近下的3d舞蹈的视频，需要自己把音频合到一起，发现有点延迟？感觉不舒服，回去看原视频很好，有点怪，不知道是b站做了什么处理。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152  ~/Movies ❯ ffmpeg -i &#x27;银狼 - [A]ddiction.mp4&#x27; -i &#x27;银狼 - [A]ddiction.m4a&#x27; -c:v copy -c:a aac -strict experimental &#x27;银狼 - [A]ddiction-with-audio.mp4&#x27;  14:38:02ffmpeg version 6.0 Copyright (c) 2000-2023 the FFmpeg developers built with Apple clang version 14.0.3 (clang-1403.0.22.14.1) configuration: --prefix=/opt/homebrew/Cellar/ffmpeg/6.0_1 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libaribb24 --enable-libbluray --enable-libdav1d --enable-libjxl --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libsvtav1 --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox --enable-audiotoolbox --enable-neon libavutil 58. 2.100 / 58. 2.100 libavcodec 60. 3.100 / 60. 3.100 libavformat 60. 3.100 / 60. 3.100 libavdevice 60. 1.100 / 60. 1.100 libavfilter 9. 3.100 / 9. 3.100 libswscale 7. 1.100 / 7. 1.100 libswresample 4. 10.100 / 4. 10.100 libpostproc 57. 1.100 / 57. 1.100Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#x27;银狼 - [A]ddiction.mp4&#x27;: Metadata: major_brand : iso5 minor_version : 1 compatible_brands: avc1iso5dsmsmsixdash encoder : Lavf58.29.100 description : Packed by Bilibili XCoder v2.0.2 Duration: 00:03:20.02, start: 0.000000, bitrate: 17498 kb/s Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709, progressive), 3840x2160, 300 kb/s, 60 fps, 60 tbr, 16k tbn (default) Metadata: handler_name : VideoHandler vendor_id : [0][0][0][0]Input #1, mov,mp4,m4a,3gp,3g2,mj2, from &#x27;银狼 - [A]ddiction.m4a&#x27;: Metadata: major_brand : iso5 minor_version : 1 compatible_brands: avc1iso5dsmsmsixdash encoder : Lavf58.29.100 description : Packed by Bilibili XCoder v2.0.2 Duration: 00:03:20.11, start: 0.000000, bitrate: 214 kb/s Stream #1:0[0x2](und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 3 kb/s (default) Metadata: handler_name : SoundHandler vendor_id : [0][0][0][0]Stream mapping: Stream #0:0 -&gt; #0:0 (copy) Stream #1:0 -&gt; #0:1 (aac (native) -&gt; aac (native))Press [q] to stop, [?] for helpOutput #0, mp4, to &#x27;银狼 - [A]ddiction-with-audio.mp4&#x27;: Metadata: major_brand : iso5 minor_version : 1 compatible_brands: avc1iso5dsmsmsixdash description : Packed by Bilibili XCoder v2.0.2 encoder : Lavf60.3.100 Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709, progressive), 3840x2160, q=2-31, 300 kb/s, 60 fps, 60 tbr, 16k tbn (default) Metadata: handler_name : VideoHandler vendor_id : [0][0][0][0] Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 128 kb/s (default) Metadata: handler_name : SoundHandler vendor_id : [0][0][0][0] encoder : Lavc60.3.100 aacframe=12001 fps=3974 q=-1.0 Lsize= 430658kB time=00:03:20.08 bitrate=17632.2kbits/s speed=66.3x video:427106kB audio:3181kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.086380%[aac @ 0x11d707a30] Qavg: 2234.092  ~/Movies ❯ ls  7s  14:40:39$RECYCLE.BIN-弱点已植入?-.m4a-弱点已植入?-.mp41 - 崩坏3「林海绮律」线上音乐会.m4a1 - 崩坏3「林海绮律」线上音乐会.mp4CacheClipCapturesInfuseMotion Templates.localizedVideos[One Fansub] Sousou no Frieren - 13 [WebRip 1080p HEVC-10bits E-AC-3].mkvbilibilidesktop.inihanser-background.movhanser除水印.jpghanser专辑曲《吵闹的雪》动画pv.m4ahanser专辑曲《吵闹的雪》动画pv.mp4iMovie Theater.theateriMovie 剪辑资源库.imovielibraryjjjunzhu水神芙宁娜动态壁纸标准屏.mp4银狼 - Classic ~.m4a银狼 - Classic ~.mp4银狼 - [A]ddiction-with-audio.mp4原神-HDR-低码率-险途勘探-1.mov原神-HDR-高码率-险途勘探-1.mov原神-HDR-高码率-险途勘探-2.mov原神-HDR-低码率险途勘探-2.mov重庆火锅&amp;北京涮羊肉 谁更妙？！【祖娅纳惜×Hanser】绝涮双娇.m4a重庆火锅&amp;北京涮羊肉 谁更妙？！【祖娅纳惜×Hanser】绝涮双娇.mp4《吵闹的雪》我的猫狂奔了一整夜(原创曲).m4a  ~/Movies ❯ ffmpeg -i &#x27;银狼 - Classic ~.mp4&#x27; -i &#x27;银狼 - Classic ~.m4a&#x27; -c:v copy -c:a aac -strict experimental &#x27;w银狼 - Classic ~with-audio.mp4&#x27;  14:42:45ffmpeg version 6.0 Copyright (c) 2000-2023 the FFmpeg developers built with Apple clang version 14.0.3 (clang-1403.0.22.14.1) configuration: --prefix=/opt/homebrew/Cellar/ffmpeg/6.0_1 --enable-shared --enable-pthreads --enable-version3 --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libaribb24 --enable-libbluray --enable-libdav1d --enable-libjxl --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librist --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libsvtav1 --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libspeex --enable-libsoxr --enable-libzmq --enable-libzimg --disable-libjack --disable-indev=jack --enable-videotoolbox --enable-audiotoolbox --enable-neon libavutil 58. 2.100 / 58. 2.100 libavcodec 60. 3.100 / 60. 3.100 libavformat 60. 3.100 / 60. 3.100 libavdevice 60. 1.100 / 60. 1.100 libavfilter 9. 3.100 / 9. 3.100 libswscale 7. 1.100 / 7. 1.100 libswresample 4. 10.100 / 4. 10.100 libpostproc 57. 1.100 / 57. 1.100Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#x27;银狼 - Classic ~.mp4&#x27;: Metadata: major_brand : iso5 minor_version : 1 compatible_brands: avc1iso5dsmsmsixdash encoder : Lavf58.29.100 description : Packed by Bilibili XCoder v2.0.2 Duration: 00:01:57.68, start: 0.000000, bitrate: 17466 kb/s Stream #0:0[0x1](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709, progressive), 3840x2160, 404 kb/s, 60 fps, 60 tbr, 16k tbn (default) Metadata: handler_name : VideoHandler vendor_id : [0][0][0][0]Input #1, mov,mp4,m4a,3gp,3g2,mj2, from &#x27;银狼 - Classic ~.m4a&#x27;: Metadata: major_brand : iso5 minor_version : 1 compatible_brands: avc1iso5dsmsmsixdash encoder : Lavf58.29.100 description : Packed by Bilibili XCoder v2.0.2 Duration: 00:01:57.78, start: 0.000000, bitrate: 189 kb/s Stream #1:0[0x2](und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 7 kb/s (default) Metadata: handler_name : SoundHandler vendor_id : [0][0][0][0]Stream mapping: Stream #0:0 -&gt; #0:0 (copy) Stream #1:0 -&gt; #0:1 (aac (native) -&gt; aac (native))Press [q] to stop, [?] for helpOutput #0, mp4, to &#x27;w银狼 - Classic ~with-audio.mp4&#x27;: Metadata: major_brand : iso5 minor_version : 1 compatible_brands: avc1iso5dsmsmsixdash description : Packed by Bilibili XCoder v2.0.2 encoder : Lavf60.3.100 Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709, progressive), 3840x2160, q=2-31, 404 kb/s, 60 fps, 60 tbr, 16k tbn (default) Metadata: handler_name : VideoHandler vendor_id : [0][0][0][0] Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 128 kb/s (default) Metadata: handler_name : SoundHandler vendor_id : [0][0][0][0] encoder : Lavc60.3.100 aacframe= 7061 fps=4540 q=-1.0 Lsize= 252926kB time=00:01:57.76 bitrate=17594.9kbits/s speed=75.7x video:250826kB audio:1882kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.086433%[aac @ 0x154707200] Qavg: 1057.115","categories":[],"tags":[]},{"title":"配镜经历","slug":"配镜经历","date":"2023-11-25T08:51:39.000Z","updated":"2023-11-26T11:52:30.613Z","comments":true,"path":"2023/11/25/配镜经历/","link":"","permalink":"http://example.com/2023/11/25/%E9%85%8D%E9%95%9C%E7%BB%8F%E5%8E%86/","excerpt":"","text":"最近去配眼镜了。 这次配眼镜我基本把配眼镜的流程了解了一下。这次我选择自己走各个步骤，而不是去商场里的眼镜店一次性搞定。 镜框我在双十一的时候已经在网上买好了眼镜框，网上买眼镜框我觉得问题不大，别搞太稀奇古怪的，或者一次性多下几个，不合适的退掉，一般眼镜店都支持这么做，或者说推荐这么做。 镜框有三个重要参数，比如我现在的镜框是55-18-145。55是单侧镜片的宽度；18是两个镜片之间，鼻托的宽度；145是镜腿长度。单位mm。 推荐55+18&#x3D;73约等于瞳距，我同距70，推荐镜框67-73这个范围的。 纯钛镜框价格应该在200-300，再贵的，我觉得记不太合适了。钛也分3种建议钛或者用IP电镀的钛。不知道有没有苹果现在用的钛的工艺做的镜框哈。 验光首先是自己去验光，我去的北京同仁医院验的光，由于我不是看不清，只是镜片老化而进行的配镜，所以度数没怎么变，同仁医院怒赚我100元验光费。就这价格还抢不到号呢，赶巧我去那天中午可能是有人退号了，有那么两个名额，让我抢到一个。 验光没有什么问题，最好每次都记着点自己的参数，尤其是瞳距，听说真有验错的，最好还是心里有个大致数据，毕竟都已经带好多年眼镜了。 验光的时候建议带着镜框过去，尤其是要网上配镜片的话，让医生帮你点一下瞳高，有的镜片需要这个数据才好配，比如蔡司的泽锐。 镜片镜片我选择去眼镜城，北京的话是潘家园眼镜城。眼镜城不是一栋楼，而是一整片区域。从潘家园地铁站出来就会有人揽你去配眼镜，但是不要跟这些人走，揽客也是成本，羊毛出在羊身上。 去潘家园眼镜城里，我就不做推荐了，我的建议是直接去北京眼镜城里3-4楼逛，他们揽客也先别进去，走一圈，看看哪家店人多去哪家问价格。人多还是有人多的道理。去的日子不一样，人多人少的情况可能也不一样。 我这次图省事，看到一家人多的就进去了，给的价格在我预期内，就配了。其实想要再省点钱，建议走一完整圈，说不定有好几家去的人都多呢。都去问问价格。说不定有奇效。还有就是讲价，他给的价格还能讲，跟他墨迹呗，这看人了，我没这个心气，就意思意思讲了一下，摸个零头还是可以的。 分享一下给我的价格，蔡司泽锐2.2折；新清锐2.6折；蔡司防蓝光2.5折左右吧；明月1.71的2.5折。 结语这基本就是我这次配眼镜的全流程了。 但是我这次配眼镜还有点小插曲。我本来是配的蔡司泽锐的镜片，但是回去带了一个星期发现那个镜片的远距离（3米以外）清晰的可视范围非常小，虽然也不是不能适应，但是心里不太能接受，总觉得远距离可视角度小似乎眼镜就没啥用了啊。 而且有且仅有反射光（比如看黑板、白班等）不清晰，自发光的相对要清晰一些。很赛博朋克。我还感觉到有些视疲劳，所以就去店里补差价换了新清锐。我这个问题在网上查了一堆，我又回顾了整个流程。确实只能说是我不适合这个自由环面的镜片。 这里关于泽锐分享几个关键点，想要尽可能降低出现不适应的情况， 要选择小镜框 要点瞳高 度数要足矫 线上配可能就不能给换了，但是线上镜片的价格可能更便宜。 只说泽锐的缺点了，有点也是有的。泽锐透光更好，刚戴上的时候我被惊艳到了；泽锐的中近距离视物确实更清晰，尤其是看手机和电脑，非球面的镜片还是会有色散的，泽锐基本没有，后来要换境片的时候纠结也就是纠结在这里，换了新清锐这些就都没了，还更贵了（折扣力度没那么大），呜呜呜，我有点想再配一个备用镜用泽锐来着，但是想了想实用程度，还是放弃了，白花钱，我完全没有换着镜子带的习惯。但是还是希望我能逐渐适应这个新技术和新镜片吧。 关于为什么泽锐的清晰可视角度比较小，可查看： 眼镜 简单说就是这个镜片从中心向四周度数逐渐递减，越远距离度数不足的问题越明显，非球面不会，所以没事。 一些感想有时候我还是挺喜欢用出历史感的东西。我很多以前的眼镜还留着，有一些不行了，有一些还是凑活的。镜片一般来说留不太住，镜框我倒是想多用一些时间，但是以前的一些镜框都有些变形，再用也不好了，有些可惜。最近研究一下，看看有没有高手能给我矫正一下。这真看技术了。 眼镜清理流水冲，洗洁精清洗，再流水冲。之后用纸吸干水珠。 都说不要用眼镜布擦眼镜，emmm。 再就超声波清洗机洗一下。或者擦镜布清擦干净。","categories":[],"tags":[]},{"title":"Telegram动漫仓库视频下载","slug":"Telegram动漫仓库视频下载","date":"2023-11-04T10:21:17.000Z","updated":"2023-11-25T11:45:41.117Z","comments":true,"path":"2023/11/04/Telegram动漫仓库视频下载/","link":"","permalink":"http://example.com/2023/11/04/Telegram%E5%8A%A8%E6%BC%AB%E4%BB%93%E5%BA%93%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD/","excerpt":"","text":"最近看《葬送的芙莉莲》，樱花动漫上的画质，或者说码率太低了，所以想自己找点资源。正好之前在tg上加入了几个动漫仓库的群组，那里面的动画画质都还不错，想能不能利用一下，当做一个源，做个软件自动把自己想看的动漫过滤下载下来。 ChatGPT我对这个也没啥经验，所以主要用ChatGPT来尝试实现这个程序。 目前看可以实现的是监控新的消息，遇到关键字拉取下来。但是想查找历史信息拉取视频不太行，tg好像没有把搜索功能的API开放出来。","categories":[],"tags":[]},{"title":"cmake","slug":"cmake","date":"2023-10-29T08:55:52.000Z","updated":"2023-10-29T08:55:52.868Z","comments":true,"path":"2023/10/29/cmake/","link":"","permalink":"http://example.com/2023/10/29/cmake/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"CSAPP","slug":"CSAPP","date":"2023-10-29T01:24:04.000Z","updated":"2023-10-29T01:27:27.506Z","comments":true,"path":"2023/10/29/CSAPP/","link":"","permalink":"http://example.com/2023/10/29/CSAPP/","excerpt":"","text":"昨天与同学面聊，提到了CSAPP的书后题答案，说是在Github上有，我找时间也看看。 同时也得把手写操作系统安排到日程上来了。写过还是比没写过要理解上强很多。","categories":[],"tags":[]},{"title":"设计模式","slug":"设计模式","date":"2023-10-28T14:20:47.000Z","updated":"2024-06-10T12:48:29.709Z","comments":true,"path":"2023/10/28/设计模式/","link":"","permalink":"http://example.com/2023/10/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"今天和同学会面闲聊，聊到了设计模式。他说设计模式还有不少用处，但是我基本上忘记了。想开这个Post复习一下，看看有机会研究一下吧。 设计模式都有哪些来着？最近提到了工厂模式，看来真得复习复习了。 CI&#x2F;CDCI&#x2F;CD 是持续集成（Continuous Integration）和持续交付&#x2F;持续部署（Continuous Delivery&#x2F;Continuous Deployment）的缩写。它是一种软件开发实践，旨在通过自动化和频繁的代码集成、测试和部署，来提高软件开发和交付的效率和质量。 持续集成（CI）指的是开发人员将代码频繁地集成到共享的代码库中，每次集成都会进行自动化的构建和测试。这样可以确保新的代码变化不会破坏现有的代码，并能够尽早地发现和解决潜在问题。 持续交付（CD）和持续部署（CD）涉及自动化软件交付和部署过程。持续交付通常指的是通过自动化流程将应用程序交付到预生产环境，以便进行更广泛的测试和验证。而持续部署则是指将通过持续集成和持续交付自动化流程生成的软件包部署到生产环境中，以便快速、可靠地将变更应用到生产环境中。 CI&#x2F;CD 的实践通常包括自动化构建、自动化测试、持续集成、持续交付、持续部署等环节。通过 CI&#x2F;CD，开发团队能够更快速地交付高质量的软件，减少人为错误，提高开发效率，同时降低软件交付的风险。 许多现代的软件开发团队和组织都采用 CI&#x2F;CD 实践，以支持敏捷开发、持续交付和DevOps文化。CI&#x2F;CD 工具和流程的选择取决于具体的需求和环境，常见的 CI&#x2F;CD 工具包括Jenkins、GitLab CI、CircleCI、Travis CI等。 我现在所在公司就在使用Jenkins。感觉对于开发来讲差不多知道怎么用就行，遵循开发原则就行了。","categories":[],"tags":[]},{"title":"LeetCode两数之和","slug":"LeetCode两数之和","date":"2023-10-28T14:16:32.000Z","updated":"2023-10-29T01:22:47.841Z","comments":true,"path":"2023/10/28/LeetCode两数之和/","link":"","permalink":"http://example.com/2023/10/28/LeetCode%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","excerpt":"","text":"总感觉直接在LeetCode上直接写完代码（实际是啥也不会、抄袭别人），自己不完全能留下一些印象，所以我想起这个Post记录一下。由于我没事会翻自己的网站看，所以应该还能起到复习的效果吧（？） 两数之和两数之和题目大致是从数组中找出两个两个数，这两个数的和正好等于目标数。 大致有两种解法： 遍历。拿一个数，与剩余其他的数做加法，看是否等于目标数。 按照我自己的理解说法，就是将看过的数留下记忆，再将新拿到的数与目标数做差，看差值是否与自己心中的数一致。 记忆工具用的是hash表。因为有记忆了，所以算法的时间复杂度应该会下降。（我对算法理性理解很差，所以请饶了我吧） 题目123456/** * Note: The returned array must be malloced, assume caller calls free(). */int* twoSum(int* nums, int numsSize, int target, int* returnSize) &#123; &#125; 我还是对C和C++感情深一些，python这种没有数据类型的编程语言着实让我有时很困扰。所以我还是记录以C为主的代码解决方案。 解法一这个我能自己写个大概，所以先自己尝试完成。 123456789101112131415161718/** * Note: The returned array must be malloced, assume caller calls free(). */int* twoSum(int* nums, int numsSize, int target, int* returnSize) &#123; int* returnnums = malloc(2 * sizeof(int)); for (int i = 0; i &lt; numsSize; i ++) &#123; for (int j = 0; j &lt; numsSize; j ++) &#123; if ((nums[i] + nums[j]) == target &amp;&amp; i != j)&#123; returnnums[0] = i; returnnums[1] = j; *returnSize = 2; return returnnums; &#125; &#125; &#125; *returnSize = 0; return NULL;&#125; 总结整理一下我自己第一遍写出现的一些问题： 不知道应该return什么 不知道returnSize是干什么的，为什么要有他 只在if语句中return了，没有注意到if语句外也需要return 忘记条件不能同时取两个相同的数。 解法二我对Hash表的使用不熟悉，要么搜索引擎解决，要么看别人的解决方案，或者找到合适的文档解决。 对于第一次使用Hash表，我计划先学习别人的解决方案，之后再对应查找相关文档。 123456/** * Note: The returned array must be malloced, assume caller calls free(). */int* twoSum(int* nums, int numsSize, int target, int* returnSize) &#123; &#125;","categories":[{"name":"Tech","slug":"Tech","permalink":"http://example.com/categories/Tech/"}],"tags":[{"name":"C","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://example.com/tags/LeetCode/"}]},{"title":"Unix命令行小工具","slug":"Unix命令行小工具","date":"2023-10-25T14:42:25.000Z","updated":"2024-04-12T06:35:11.066Z","comments":true,"path":"2023/10/25/Unix命令行小工具/","link":"","permalink":"http://example.com/2023/10/25/Unix%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B0%8F%E5%B7%A5%E5%85%B7/","excerpt":"","text":"整理一些Unix命令行小工具统计cpp文件中有多少行代码：12find . | grep \\.cpp$ | xargs cat | wc -lcat $(find . | grep \\.cpp$) | wc -l 挺有意思的。 压缩1234567891011tar -cvf jpg.tar *.jpg #[//将目录里所有jpg文件打包成tar.jpg](https://xn--jpgtar-k18i60zu6u9rh3xhkqa1h032blufb97e1p9e.jpg/)tar -czf jpg.tar.gz *.jpg #[//将目录里所有jpg文件打包成jpg.tar后](https://xn--jpgjpg-k18i60zu6u9rh3xhkqa1h032blufb97e1p9e.xn--tar-x33e/)，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gztar -cjf jpg.tar.bz2 *.jpg #[//将目录里所有jpg文件打包成jpg.tar后](https://xn--jpgjpg-k18i60zu6u9rh3xhkqa1h032blufb97e1p9e.xn--tar-x33e/)，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2tar -cZf jpg.tar.Z *.jpg #[//将目录里所有jpg文件打包成jpg.tar后](https://xn--jpgjpg-k18i60zu6u9rh3xhkqa1h032blufb97e1p9e.xn--tar-x33e/)，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Zrar a jpg.rar *.jpg #rar格式的压缩，需要先下载rar for linuxzip jpg.zip *.jpg #zip格式的压缩，需要先下载zip for linux 解压12345678910tar -xvf file.tar #打开 tar包tar -xzvf file.tar.gz #[//解压tar.gz](https://xn--tar-vo3e979v.gz/)tar -xjvf file.tar.bz2 #解压 tar.bz2tar -xZvf file.tar.Z #[//解压tar.Z](https://xn--tar-vo3e979v.z/)tar -Jxvf fle.tar.xz #[//解压tar.xz](https://xn--tar-vo3e979v.xz/)unrar e file.rar #解压rar #“x”：解压时保存原压缩文件目录结构。 unzip file.zip //解压zip 总结1、*.tar 用 tar -xvf 解压 2、*.gz 用 gzip -d或者gunzip 解压 3、*.tar.gz和*.tgz 用 tar -xzf 解压 tar.xz 用 tar -Jxvf 解压 4、*.bz2 用 bzip2 -d或者用bunzip2 解压 5、*.tar.bz2用tar -xjf 解压 6、*.Z 用 uncompress 解压 7、*.tar.Z 用tar -xZf 解压 8、*.rar 用 unrar e解压 9、*.zip 用 unzip 解压 可以用unrar命令解压rar后缀的文件 unrar e test.rar 解压文件到当前目录 unrar x test.rar &#x2F;path&#x2F;to&#x2F;extract unrar l test.rar 查看rar中的文件 unrar v test.rar 更详细 unrar t test.rar 测试是否可以成功解压 Linux下查询哪个文件夹占据较大磁盘空间到某个目录下 12345678$ du -sh *8.0K $RECYCLE.BIN24K Data4.0K Desktop4.0K Documents4.0K Downloads4.0K JcatDaemonLogs... 带上排序? 1 查看挂载1234567$ df -hFilesystem Size Used Avail Use% Mounted ondevtmpfs 378G 0 378G 0% /devtmpfs 378G 144M 378G 1% /dev/shmtmpfs 378G 1.6G 377G 1% /runtmpfs 378G 0 378G 0% /sys/fs/cgroup/dev/mapper/rootvg-root 49G 21G 29G 42% / Linux命令行查看视频分辨率ChatGPT在Linux命令行中，你可以使用 ffprobe 命令来查看视频的分辨率。ffprobe 是 FFmpeg 套件中的一个工具，可以用于分析媒体文件的信息。 要查看视频的分辨率，你可以使用以下命令： 1ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 &lt;video_file.mp4&gt; 这个命令会输出视频的宽度和高度，例如： 11920x1080 请确保你已经安装了 FFmpeg 包，以便使用 ffprobe 命令。如果没有安装，你可以使用包管理器（如 apt 或 yum）来安装它。","categories":[],"tags":[{"name":"Unix","slug":"Unix","permalink":"http://example.com/tags/Unix/"}]},{"title":"k8s以及云原生","slug":"k8s以及云原生","date":"2023-10-22T02:04:23.000Z","updated":"2024-06-10T12:48:29.708Z","comments":true,"path":"2023/10/22/k8s以及云原生/","link":"","permalink":"http://example.com/2023/10/22/k8s%E4%BB%A5%E5%8F%8A%E4%BA%91%E5%8E%9F%E7%94%9F/","excerpt":"","text":"我打算将我云原生的那个库删掉，同时并入我的blog里。 云原生我去年开始正式投入接触云原生的学习，到如今也接触了有一年的时间了。以前不理解这玩意有什么特别的，尤其是之前没有接触过大企业中的软件。自己的小软件，或者干脆就是跑几行代码，在bare metal上部署，性能、软硬件结合以及方便程度都要高于使用容器，甚至虚拟机都要更方便。但现在看来它在大企业庞大的软件体系下确实很方便。虽然到每个开发者手中依然不怎么直接使用云原生开发，或者说不是完全的云原生开发，但是云原生的工作流程了解一下还是好的。 我个人认为云原生基本跟运维是一个活。 什么是云原生云原生计算基金会（CNCF）起初给出的定义： · 应用容器化 · 面向微服务 · 应用支持容器的编排调度 重定义：TBD Kubernetes为什么Kubernetes叫K8S？因为K与s中间有8个字母。 Kubernetes是什么？他是一个容器编排系统，用于实现对容器调度。 Kubernetes一家独大吗？差不多，但也不是。Kubernetes是Google基于自家的Borg系统用go语言改写的。 但同时这个是开源项目，大家可以根据自己的需求进行改写。这样就产生了很多种类似的系统，一般会称为“平台”。 比如K3S、红帽的OpenShift、Google的GDCE、爱立信的CCD、微软的AWS。所以并不是单纯的一家独大，但是大家都基于K8S。基础知识点是一致的。 云原生方向主要还是to B的。 之前有说过K8S是对容器的调度，容器是什么？ 这就不得不提到Docker。 DockerDocker可以被认为是覆盖了整个容器界，可能听说过containerd，这个也是Docker分出去的一个模块而已，还有cri-o等。 K8S包含的资源工作资源工作资源类似计算资源，为整个集群提供计算服务。 Node，一个Node一般是机柜上的一台机器，也可以是一台虚拟机，但是是一台完整的操作系统（区别于docker）。 工作资源的调度单位为Pod。一个Pod是一个或者多个容器的集合，一个Node上可以有多个Pod。 容器在Pod里，一个Pod内可以有一个或多个容器实例。一般会把功能结合比较紧密的容器放入同一个Pod，进而形成一个微服务，一个Pod只完成一个服务（功能）。 存储资源为各个物理机上的硬盘存储。 Linux操作系统中的文件系统，持久性存储资源需要K8S进行分配，保存在host机上。 网络资源物理机上的网卡，以及很多由硬件网卡实现的虚拟网络资源。 K8S内部的各个功能模块需要进行通信，k8s中的大多数操作都是通过网络通信来实现的。所以K8S中的每个Pod都要有其网络规划（在同一个Pod内的容器共享相同的网络资源）。管理K8S网络规划的（我要是没记错）默认是…（忘了），也可以换用其他插件（例如calico、cilium等）。 当然你也可以有额外的网络需求，自己搭建专用、独立的另一套网络，这时就需要使用到k8s的另外的一些插件了（例如multus等），Google也在做multi network，做好集成进K8S后就算官方支持了。 K8S架构提到K8S架构，首先可以简单看看他的祖先Borg的架构。简单过一下就可以，详细的不做讲解。 之后看看K8S官网的架构图： 再展示一些网上的第三方绘图： 首先来看看想要将一堆计算机变为一个可以被管理的集群的基本需求——k8s都有什么。 控制平面组件以及Node组件： 控制平面组件这部分官方文档讲的很好，我摘了一些过来。 kube-apiserver API 服务器是 Kubernetes 控制平面的组件， 该组件负责公开了 Kubernetes API，负责处理接受请求的工作。 API 服务器是 Kubernetes 控制平面的前端。 我们从命令行发出的指令全都经过这里转给各个Node。 etcd etcd 是兼顾一致性与高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。 比如Node ungraceful重启时Node上的信息就保存在这里，在Node恢复的时候就可以使用这些信息来恢复原来的状态。 kube-scheduler kube-scheduler 是控制平面的组件， 负责监视新创建的、未指定运行节点（node）的 Pods， 并选择节点来让 Pod 在上面运行。 kube-controller-manager kube-controller-manager 是控制平面的组件， 负责运行控制器进程。 从逻辑上讲， 每个控制器都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在同一个进程中运行。 这些控制器包括： 节点控制器（Node Controller）：负责在节点出现故障时进行通知和响应 任务控制器（Job Controller）：监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成 端点控制器（Endpoints Controller）：填充端点（Endpoints）对象（即加入 Service 与 Pod） 服务帐户和令牌控制器（Service Account &amp; Token Controllers）：为新的命名空间创建默认帐户和 API 访问令牌 cloud-controller-manager 一个 Kubernetes 控制平面组件， 嵌入了特定于云平台的控制逻辑。 云控制器管理器（Cloud Controller Manager）允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。 cloud-controller-manager 仅运行特定于云平台的控制器。 因此如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的集群不需要有云控制器管理器。 节点组件会在每个节点上运行，负责维护运行的 Pod 并提供 Kubernetes 运行环境。 Node组件kubelet kubelet 会在集群中每个节点（node）上运行。 它保证容器（containers）都运行在 Pod 中。 kubelet 接收一组通过各类机制提供给它的 PodSpecs， 确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。 kube-proxy kube-proxy 是集群中每个节点（node）所上运行的网络代理， 实现 Kubernetes 服务（Service） 概念的一部分。 容器运行时（Container Runtime） 容器运行环境是负责运行容器的软件。 Kubernetes 支持许多容器运行环境，例如 containerd、 CRI-O 以及 Kubernetes CRI (容器运行环境接口) 的其他任何实现。 这些我理解可以认为是计算资源上以及存储资源上的架构，接下来看一张接口上的架构： CNI（容器网络接口）： 这些名称暂时不需要理解，后续会逐步讲解。 CRI（容器运行时接口）： cri-o containerd docker 前期简单的介绍了解到这里我觉得就可以了。 接下来要进入下一章内容，详细讲讲Pod。 如果你已经迫不及待想要上手了，请继续阅读这里。 随笔Pod Disruption Budget会对drain node有影响。 123$ kubectl get pdb Volume Attributes Classes可以限制PVC的IO访问速度。 (Volume Attributes Classes)[https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/] 在 Linux 上重启 Kubernetes要在主节点或工作节点上重新启动 kubelet 服务，请使用以下 systemctl 命令： $ sudo systemctl restart kubelet 然后，检查 kubelet 服务的当前状态： $ sudo systemctl status kubelet How do you enable Feature Gates in K8s?(How do you enable Feature Gates in K8s?)[https://stackoverflow.com/questions/59814862/how-do-you-enable-feature-gates-in-k8s] 使用 kubeconfig 文件组织集群访问要查看配置，输入以下命令： kubectl config view (使用 kubeconfig 文件组织集群访问)[https://kubernetes.io/zh-cn/docs/concepts/configuration/organize-cluster-access-kubeconfig/#:~:text=%E8%A6%81%E6%9F%A5%E7%9C%8B%E9%85%8D%E7%BD%AE%EF%BC%8C%E8%BE%93%E5%85%A5%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4%EF%BC%9A%20kubectl,config%20view] Pod Disruption Budget (PDB)Pod Disruption Budget（Pod 中断预算）是 Kubernetes 中的一个资源，它用于定义在进行节点维护或故障转移时，允许同时终止的 Pod 数量的限制。Pod Disruption Budget 通过控制 Pod 的中断数量，可以帮助确保集群中的服务在节点维护或故障转移时仍然能够保持高可用性。 Pod Disruption Budget 资源定义了一个或多个故障域（例如节点、区域、机架），并指定了在该故障域中能够同时终止的 Pod 的最大数量。这有助于避免在维护节点或进行故障转移时，过多的 Pod 被同时终止，从而导致服务的可用性下降。 Pod Disruption Budget 可以通过 Kubernetes 的 API 来定义和管理。在定义 Pod Disruption Budget 时，您可以指定以下信息： selector：用于选择受 Pod Disruption Budget 约束的 Pod 的标签选择器。 minAvailable：指定在维护期间必须保持可用的最小 Pod 数量。 maxUnavailable：指定在维护期间可以不可用的最大 Pod 数量。 Pod Disruption Budget 通常与控制器（如 Deployment、StatefulSet）结合使用，以确保在维护时 Pod 的中断数量受到控制。通过使用 Pod Disruption Budget，您可以在进行节点维护或故障转移时，对 Pod 的中断数量进行限制，从而确保服务的高可用性。 总之，Pod Disruption Budget 是 Kubernetes 中用于控制 Pod 中断数量的一种资源，它有助于确保在节点维护或故障转移时，服务依然能够保持高可用性。 Ingress and Ingress controller","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/tags/k8s/"},{"name":"cloud_native","slug":"cloud-native","permalink":"http://example.com/tags/cloud-native/"}]},{"title":"香橙派OpenWrt使用指南","slug":"香橙派OpenWrt使用指南","date":"2023-09-24T00:54:42.000Z","updated":"2024-01-27T02:17:33.429Z","comments":true,"path":"2023/09/24/香橙派OpenWrt使用指南/","link":"","permalink":"http://example.com/2023/09/24/%E9%A6%99%E6%A9%99%E6%B4%BEOpenWrt%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/","excerpt":"","text":"准备工作香橙派5p、用户手册、香橙派openwrt TF卡用iso镜像 计划实现 安装Openclash 配置旁路由（遇到了一些问题） ssh登陆、更改密码等准备工作查看用户手册安装Openclashopkg更新在没有科学上网的情况下需要手动更改镜像源。 插 picture1 ! 在/etc/opkg/customfeeds.conf下添加： 123456src/gz openwrt_core https://mirrors.aliyun.com/openwrt/releases/22.03.4/targets/rockchip/armv8/packagessrc/gz openwrt_base https://mirrors.aliyun.com/openwrt/releases/22.03.4/packages/aarch64_generic/basesrc/gz openwrt_luci https://mirrors.aliyun.com/openwrt/releases/22.03.4/packages/aarch64_generic/lucisrc/gz openwrt_packages https://mirrors.aliyun.com/openwrt/releases/22.03.4/packages/aarch64_generic/packagessrc/gz openwrt_routing https://mirrors.aliyun.com/openwrt/releases/22.03.4/packages/aarch64_generic/routingsrc/gz openwrt_telephony https://mirrors.aliyun.com/openwrt/releases/22.03.4/packages/aarch64_generic/telephony Trouble ShootingHDMI显示问题最近赶上我的小主机送回去维修（低功耗待机重启问题），我又把香橙派装上了ubuntu系统，当一个临时的linux桌面玩玩。 这样就把香橙派接上了HDMI，结果屏幕不亮。这勾起了我古老的回忆，当时刚买这个开发板的时候，就遇到这个问题了。 我在群里问了问，其他人没有遇到这个问题，我就又把调查方向改向了我自己。最后在显示器设置中发现：hdmi ultra hd deep color，这个选项的调整会影响显示。 目前原理未知。","categories":[{"name":"Daily_life","slug":"Daily-life","permalink":"http://example.com/categories/Daily-life/"}],"tags":[{"name":"Pi","slug":"Pi","permalink":"http://example.com/tags/Pi/"}]},{"title":"Github与hexo","slug":"Github与hexo","date":"2023-07-03T16:24:35.000Z","updated":"2023-11-18T01:19:34.264Z","comments":true,"path":"2023/07/04/Github与hexo/","link":"","permalink":"http://example.com/2023/07/04/Github%E4%B8%8Ehexo/","excerpt":"","text":"诶嘿今天一时兴起，想把hexo与github自带的主页看看能不能融合一下，好充分利用一下我写的乱七八糟的东西。 就查阅了一下： Hexo结合github搭建个人博客 使用hexo+github搭建免费个人博客详细教程 主要用的就是第二篇。我简单题几条我自己做的改进。 使用github时单独为博客建立一个仓库，之后用git管理，这并不影响hexo直接部署到github的个人主页上这个问题。如果不希望自己的源码被别人看到，可以设置成private的仓库。 在加载其他主题的时候我更建议使用git submodule来实现，而不是使用git clone。 这样更方便后续跟进更新。 或许用fork更好？用git submodule的话我想要自己对主题做一些更改好像不太好存储啊？没太想好，之后又机会再研究吧。 还没想好如何解决插入图片的问题。 其他查阅的资料Hexo git deployer删除了提交历史记录该怎么办？ 插入图片得到了解决！！！我不打算为图床付费，而且也不指望国内的图床能够长久使用，所以我打算用github作为图床。 我平时还是有一点整理笔记的习惯，本来打算用博客简单替代整理过的笔记，但是很多时候自己搭的博客很不方便。就比如图片上传，如果全人工手动上传再将连接添加到md文件中，真的很短节奏和费力，所以我的博客搭建也就暂时搁置了，继续在使用notion。 但是最近兴致起来了，又查了查，结合着typora（毕竟是付费购买了的），还是有再把博客搞起来的机会。 PicGohttps://github.com/Molunerfinn/PicGo 我使用了PicGo这款软件来帮助我管理我博客的图片。由于是macos运行PicGo的时候还遇到了点问题，解决方案 参考文献： ​ hexo + typora 图片插入解决办法 ​ Typora+hexo发布博客 友链咋回事没弄明白本地生成没啥难度，远程拉取是什么玩意，官方文档内容不够详细啊，感觉。 看板娘之前看到不少博客里有看板娘，也想自己也搞一个试试。但查了查感觉自己进了个大坑，尤其是我这种完全不熟悉前端的。 放两个文章，有时间有机会再看吧，感觉需要一些时间理解理解。 快来给你的Hexo博客招募亿只live2d看板娘吧(๑•̀ㅂ•́)و✧❤️ 网页添加 Live2D 看板娘 第二篇更重要些，讲API和换装功能。 这篇还没看，也是讲看板娘的 Live2D Widget live2d-widget 给你的hexo添加live2D看板娘","categories":[{"name":"Daily_life","slug":"Daily-life","permalink":"http://example.com/categories/Daily-life/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"树莓派OS那些事","slug":"树莓派OS那些事","date":"2023-07-01T11:42:50.000Z","updated":"2023-10-20T16:00:00.000Z","comments":true,"path":"2023/07/01/树莓派OS那些事/","link":"","permalink":"http://example.com/2023/07/01/%E6%A0%91%E8%8E%93%E6%B4%BEOS%E9%82%A3%E4%BA%9B%E4%BA%8B/","excerpt":"","text":"安装系统使用树莓派官方下载器下载安装，下载时需要代理，如果没有代理最好自己先下载好iso文件再直接导入。 开始之前的准备安装好系统之后，需要现在电脑上调一些设置再插入树莓派开机。 如果想要直接讲树莓派作为服务器不介入屏幕的话，尤其注意需要有限做这几件事。 ssh首先打开ssh访问许可，在根目录下（在win下应该会挂载成boots这个盘）直接新建文件“ssh”，这样就打开了ssh。 树莓派开启ssh的几种方式 密码以前树莓派的默认用户名和密码分别是pi和raspberry，但是现在为了安全，一般是在安装系统的时候会弹出设置界面，但是我安装的时候没看到弹出。 所以就只能手动加入用户名和密码信息了。 在PC端，打开tf卡的根目录（boot的根目录），创建 userconf.txt文件，该文件内输入用户名和密码的密文，例如，格式如下： 1用户名:密码密文 以下例子，用户名为pi，密码为raspberry的密文 1pi:$6$4ilokQRQxmURT.py$aJWBQ5yniJJPwV3CKawYJcnSK5JZGhrVZYF3K4omRUFv6KL0MysEH7F4NZRMNMcYF.U3xsQvWrx7ZL2GKxuv.1 保存文件并安全退出tf卡。把tf卡装回树莓派的tf卡槽，开机后，系统就会自动配置用户名和密码，pi 密码是 raspberry。 树莓派新系统中配置默认用户和密码 登录开机记得换镜像源，直接搜索清华的就行，里面还有具体的教程。 换完源之后记得更新系统。 raspbian清华镜像源 debian清华镜像源 raspberrypi清华镜像源 镜像源VNC我用了一下系统自带的realvnc，不知道为什么特别卡，所以我就自己安装了tightvnc。 用了tightvnc之后，也会遇到一点小问题，目前还没注意，反正点一点也就完事了。已经遇到且发现了。 安装以及使用tightvncVNC安装 error: ​ vnc没有taskbar Missing taskbar in VNC 仅用作参考文章： How to Install TightVNC 连接vnc无任务栏如何解决 固定IP配置静态IP。 1.使用 ssh 连接树莓派或者直接将显示器接到树莓派主板上。 2.打开终端，键入命令：sudo vim /etc/dhcpcd.conf，修改网络配置文件。 3.按如下所示进行修改： 4.键入命令：sudo reboot 重启就行了。 不想重启系统的话就使用systemctl restart dhcpcd 重启dhcpcd.service就可以了 5.使用命令：ifconfig 即可查看 ip 地址是否固定成 功： Tips： 有线网络接口 eth0 是默认就有的，只需要去掉 ‘#’ 注释符 无线网络接口是需要自己添加的，复制粘贴有线网络接口的配置进行修改就行了 树莓派如何固定IP地址 ssh自动登录SSH使用密钥登录 安装DockerDocker – 从入门到实践 Error：123pi@raspberrypi:~ $ sudo usermod -aG docker $USERconfiguration error - unknown item &#x27;NONEXISTENT&#x27; (notify administrator)configuration error - unknown item &#x27;PREVENT_NO_AUTH&#x27; (notify administrator) configuration error when trying to add a user to the sudo group 1234pi@raspberrypi:~ $ docker run --rm hello-worldUnable to find image &#x27;hello-world:latest&#x27; locallydocker: Error response from daemon: Head &quot;https://registry-1.docker.io/v2/library/hello-world/manifests/latest&quot;: dial tcp: lookup registry-1.docker.io on 192.168.1.1:53: no such host.See &#x27;docker run --help&#x27;. 感觉就是被墙了。 解决方案： 1234567891011121314151617181920212223~ ❯ dig @114.114.114.114 registry-1.docker.io  16:07:57; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; @114.114.114.114 registry-1.docker.io; (1 server found);; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 33368;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 512;; QUESTION SECTION:;registry-1.docker.io. IN A;; ANSWER SECTION:registry-1.docker.io. 48 IN A 44.205.64.79registry-1.docker.io. 48 IN A 34.205.13.154registry-1.docker.io. 48 IN A 3.216.34.172;; Query time: 52 msec;; SERVER: 114.114.114.114#53(114.114.114.114);; WHEN: Wed Jul 12 16:08:20 CST 2023;; MSG SIZE rcvd: 97 123456# 1、找到可用IPdig @114.114.114.114 registry-1.docker.io# 2、找到任一可用ip，添加至hosts文件vim /etc/hosts# 3、从上面选择一个 IP 增加44.205.64.79 registry-1.docker.io docker run报错 【问题解决】Error response from daemon: Head https://registry-1.docker.io/v2/ Error response from daemon: Get https://registry-1.docker.io/v2/: dial tcp: lookup registry-1.docker.io on 192.168.65.1:53: no such host #4884 安装docker后的其他玩法1 比较好的文章1 2 一般的文章2 OpenWRT在树莓派上使用Dockers运行Openwrt并作为主路由器的旁路由 树莓派docker 部署openwrt 软路由 使用Docker安装Openwrt软路由 Docker 安装 openwrt 软路由 Docker 部署的 openWrt 软路由, 并解决无法与宿主机通信问题 OpenWrt软路由部署Docker-PHP镜像，自由观看4K IPTV！ 树莓派网络监控（官方64位系统+docker+motioneye+内网穿透） 树莓派 4B OpenWrt 旁路由教程 iStore uu加速器 luci-app 为什么我ipk软件安装后都找不到软件入口啊 问题：如何将宿主机的网络也接入容器中的openwrt？ 设想：将openwrt的ip设置成宿主机的网关。 ​ 遇到的困难：宿主机ping不通openwrt的ip。 结论：通过macvlan创建出的虚拟网卡是无法与宿主机的网络互联的。之后还想使用docker的bridge模式，但是此bridge非彼bridge。这个bridge会创建类似NAT的一个网络拓扑，在docker内是桥接模式，还是无法直接与宿主机通讯的，这与虚拟机的bridge实现不同。 ​ 一些文献： ​ 通过IP发现MAC地址的方法 ​ 网络设置基本命令 ​ linux内核arp访欺骗配置,linux系统防止arp欺骗的方法 ​ Linux环境下如何配置IP地址、MAC地址 ​ linux – 添加、修改、删除路由 error: 问题： 树莓派4B使用最新容器镜像CPU占用过高问题 #70 解决方案： OpenWRT解除console对串口的占用 Portainer12docker volume create portainer_datadocker run -d -p 8000:8000 -p 9443:9443 -p 9000:9000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest Install Portainer CE with Docker on Linux 不想用命令行管理docker的话，它就很不错。 Pi Dashboard1docker run -d --name docker-pi-dashboard -e &#x27;LISTEN=1024&#x27; --net=host ecat/docker-pi-dashboard --restart=always docker-pi-dashboard 如名，Dashboard。 HomeAssistant得先有home再有homeassistant。装上了，没用。 Raspberry Pi Aria2我树莓派没挂载机械或者固态，所以这个虽然是神器但是没有用武之地。Samba同理。 TBD Samba树莓派搭建samba小型家庭NAS书籍影音服务器 树莓派Samba服务器 可能遇到的问题： 禁止树莓派自动挂载外接硬盘_捉不住的鼬鼠的博客-CSDN博客 我遇到的问题： 直接插移动硬盘挂载不上，插着硬盘重启了一次树莓派就直接挂上了。不知道怎么了。 Raspberry Pi挂载可移动存储设备(Linux通用) 感觉samba体验也就一般般吧。说不上好坏。 UU加速器感觉还是第一个应该是最靠谱的，但是现在还不太行，暂时不装这个了。 TBD UU加速器终于支持OP了-OPENWRT专版-恩山无线论坛 - Powered by Discuz! luci-app-UUGameAcc UU OpenWrt插件 v2ray下载安装 · Project V 官方网站 NextCloudNextCloud是一个本地网盘，要是有公网IP也可以是网盘，但是必须要域名，没买域名而且只用树莓派的话等于用不了。 nextcloud好像强制需要域名，可能不太好办。 【好玩儿的Docker项目】可能是目前全网最完整的Docker搭建Nextcloud教程（包含安全与设置警告报错信息的解决方法） GitHub - nextcloud&#x2F;all-in-one: Nextcloud AIO stands for Nextcloud All-in-One and provides easy deployment and maintenance with most features included in this one Nextcloud instance. 本地域名： https://github.com/nextcloud/all-in-one/blob/main/local-instance.md Pi Holehttps://github.com/pi-hole/docker-pi-hole/#running-pi-hole-docker unbound - Pi-hole documentation Pi Hole 是一个dns服务器，功能很多，但是我自己一般能用到的比较少。我按照网上的配置配了广告过滤，效果很不错，但是在树莓派上本身还过openwrt，再过Pi Hole网络性能下降太多了，尤其是Pi Hole，所以我配置了一下之后就不再使用了。 嵌入式用法目前为止，我一直将树莓派用作Linux服务器来使用。它本身的一些嵌入式功能反而没有深入研究，所以在这个章节我打算记录一下嵌入式相关的玩法。 TBD","categories":[{"name":"Daily_life","slug":"Daily-life","permalink":"http://example.com/categories/Daily-life/"}],"tags":[{"name":"Pi","slug":"Pi","permalink":"http://example.com/tags/Pi/"}]},{"title":"准备leetcode的第二天","slug":"准备leecode的第二天","date":"2023-06-19T13:14:32.000Z","updated":"2023-10-28T14:16:08.729Z","comments":true,"path":"2023/06/19/准备leecode的第二天/","link":"","permalink":"http://example.com/2023/06/19/%E5%87%86%E5%A4%87leecode%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/","excerpt":"","text":"数据结构复习 冒泡排序做个类比话，冒泡排序就是你小学时老师给你们班同学大小个。老师会先让你们随便站一排，然后他会从前面开始看，如果发现有两个挨着的人，高的在前面，矮的在后面了，就会让他俩换一下，一直换到排尾，这样排尾那个人就是最高的。再来一次，最后一个和倒数第二个就是排好的了。这样一共来n次，n是全班的人数，全班就肯定都排好了。 选择排序假设个场景，按学术水平给大家排队上台领奖。之前大家不知道这个要求，已经随便在下面坐好了。这种情况下，我们要求，第一个作为上的同学先说说自己的学术水平。比如第一个同学说我能做到50nm，之后后面的同学依次报自己的水平，之后我们需要所有同学中制成能做到最小的，他直接和第一个同学换一下位置。好，之后一共来n次，就排完了。 插入排序玩扑克，摸牌。摸完牌有不少人有习惯按顺序排手牌。你摸牌之后，你看他会做什么，把牌插到手牌里，对吧。但是我们主观有个判断能力，这🃏如果大就从后往前插入，这🃏如果小就从前往后插入。但是计算机没这个主观判断的能力，我们都希望要大牌，我们就希望我们拿来的🃏就是大的，所以就从后往前插。（仅供记忆用，实际的原理不是这样）","categories":[{"name":"Tech","slug":"Tech","permalink":"http://example.com/categories/Tech/"}],"tags":[{"name":"C","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"准备leetcode刷题第一天","slug":"准备leecode刷题第一天","date":"2023-06-18T14:54:28.000Z","updated":"2023-10-28T14:17:07.055Z","comments":true,"path":"2023/06/18/准备leecode刷题第一天/","link":"","permalink":"http://example.com/2023/06/18/%E5%87%86%E5%A4%87leecode%E5%88%B7%E9%A2%98%E7%AC%AC%E4%B8%80%E5%A4%A9/","excerpt":"","text":"今天做点简单的准备，并做好下周的规划。 ｜星期日｜星期一｜星期二｜星期三｜｜ 星期日：准备基础环境：编辑器：vscode、vim、lvim操作系统：MacOS、Ubuntu编译环境：gcc、g++、clang、（Java、Python、go）debug工具：gdb（Ubuntu）、lldb（MacOS）Terminal：kitty、tmux 编辑器编辑器我打算学习使用一下lvim，lvim是一套现成的带插件neovim，可能在某些方面他不如vscode，但是我也想学学入一下门。 准备花一个月的时间来学习、适应lvim。 学习流程安排数据结构复习： 排序： 冒泡排序 选择排序 插入排序 希尔排序 归并排序 快速排序 堆排序 计数排序 桶排序 基数排序 树： 图：","categories":[{"name":"Tech","slug":"Tech","permalink":"http://example.com/categories/Tech/"}],"tags":[{"name":"C","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://example.com/tags/LeetCode/"}]},{"title":"国行PS5备份港服那些事","slug":"国行PS5备份港服那些事","date":"2023-06-06T04:46:58.000Z","updated":"2023-10-21T15:45:57.550Z","comments":true,"path":"2023/06/06/国行PS5备份港服那些事/","link":"","permalink":"http://example.com/2023/06/06/%E5%9B%BD%E8%A1%8CPS5%E5%A4%87%E4%BB%BD%E6%B8%AF%E6%9C%8D%E9%82%A3%E4%BA%9B%E4%BA%8B/","excerpt":"","text":"仅记录我自己想要备份港服时遇到的问题。 我买的国行PS5，为了省钱和省事没买港版和日版。机器到了之后我也没第一时间备份港服，先是在国服下了个原神，又拿光盘安装了两个游戏。 我一开始是没有着急注册港服账号的，因为想着买光盘玩。但是后来发现有一些游戏可以ps4升级ps5，在国服又无法升级，这样产生了这样的需求。 所以我先要备份的时候已经安装了几个游戏了，但是备份与恢复听起来好像就会把我已经安装的游戏删掉，为了避免把我费了很长时间下载的游戏删掉，我做了一些调查，找到比较有参考意义的论坛内容： 国行PS5增加账号问题 ps5ssd问题 根据这两篇内容被提问者采纳的回答，我总结如下： 如果找熟人备份可以同时备份国服和其他服账号，之后用于恢复PS5，这样不会删除已经安装在m.2 SSD中的游戏。 将PS5内置的m.2 SSD卸下来安装在别的PS5机器上是可以直接识别游戏的。 这样考虑到我的情况，以及保险起见，我为自己设计的计划如下： 首先，在某宝商家下单备份外服账号的服务，之后按照指导完成他们的需求。 同时可以考虑备份一下自己的现在的PS5，如果游戏不是跨平台的，想保留存档就只能开国服会员。 之后在等待PS5外服账号备份的时候，可以关机卸掉m.2 SSD。 收到备份后，按要求恢复备份。 恢复备份后，登陆自己的国行账号，关机。再将m.2 SSD安装进去，启动PS5，OK，下载的游戏都能识别到。 但是这个过程也挺麻烦的，如果有人尝试过在没有国行的备份中恢复备份，且不卸掉m.2 SSD会怎么样就更好了，至少我目前没看到有人分享这样的经验。 如果没安装大游戏的可以试试，欢迎大家分享。","categories":[{"name":"Daily_life","slug":"Daily-life","permalink":"http://example.com/categories/Daily-life/"}],"tags":[{"name":"Game","slug":"Game","permalink":"http://example.com/tags/Game/"}]},{"title":"Redmi Note5A 刷LineageOS","slug":"Redmi-Note5A-刷LineageOS","date":"2023-02-02T14:59:37.000Z","updated":"2023-10-21T15:49:11.092Z","comments":true,"path":"2023/02/02/Redmi-Note5A-刷LineageOS/","link":"","permalink":"http://example.com/2023/02/02/Redmi-Note5A-%E5%88%B7LineageOS/","excerpt":"","text":"解除小米的Bootloader锁自行Google，官方就有解决方案，需要Windows。 下载adb自行Google下载，如果不识别设备，Google解决方案，网上也有讲，大概就是手动绑定对应设备。 手机得开开发者模式，小米系统还要插sim卡绑定乱七八糟的东西，需要小米账号，之后就可以adb控制了。 还有介绍说要下载usb驱动，但是我没下也没啥大问题；还有说要usb2.0，我也没usb2.0，也没啥大问题。 引导启动有3个不同的东西，一个是recovery系统、一个是fastboot、一个是我们要刷的系统。 首先应该是进入fastboot，之后在这个模式下刷recovery系统，但是我实际遇到了些问题，可能是没权限，反正直接刷重启是啥也没有，还是小米的recovery。不过可以fastboot里面直接用那个recovery reboot，就能进去了，不同手机的recovery不一样，必须对应才能好使。进去之后再install recovery就可以成功刷进去recovery系统了，以后再进recovery就都是新的了。 刷机包（rom）不需要提前下到手机里，只要进recovery用adb就能pull传包，也可以sideload直接刷。我的recovery就是adb传的，系统和opengapp就是sideload刷的。在系统也是必须对应手机才行，会有一个字母代码，小众的手机必须对上代码才行，我这个就是ugg，什么ugglite、r（balabala）啥的虽然也是红米Note5A但不一样，都不能用。之后就去网上搜有没有这个代码的系统，然后可能就能（或者不能）找到私包，就可以安装。由于私包咱们也没安过不知道会不会有问题，可以先只安装系统（不安装gapp）试一下，能进系统开机就没问题。之后再重刷一下系统，再安装谷歌框架就可以了，谷歌框架用对应的安卓版本就行，open gapp感觉更容易成功，反正失败了就进不去系统了。换个包重刷就行。 总结我刷过3台手机的LineageOS系统了，两个官方支持的，有教程。一个第三方的，歪门邪道的刷机包也好使。总体来说只要官方不锁bootloader就挺好刷的。没啥难度。","categories":[{"name":"Daily_life","slug":"Daily-life","permalink":"http://example.com/categories/Daily-life/"}],"tags":[{"name":"LineageOS","slug":"LineageOS","permalink":"http://example.com/tags/LineageOS/"},{"name":"android","slug":"android","permalink":"http://example.com/tags/android/"},{"name":"刷机","slug":"刷机","permalink":"http://example.com/tags/%E5%88%B7%E6%9C%BA/"}]},{"title":"zinit on Apple terminal","slug":"zinit on Apple terminal","date":"2023-01-02T05:45:46.000Z","updated":"2023-07-20T16:11:00.617Z","comments":true,"path":"2023/01/02/zinit on Apple terminal/","link":"","permalink":"http://example.com/2023/01/02/zinit%20on%20Apple%20terminal/","excerpt":"","text":"Problem我很久之前一直在linux上用的omz，后来听说zinit可以自己控制插件的安装，而且启动速度更快，所以就转到使用zinit。起初是一直没什么问题的，但是后来我开始使用Mac。当我从Linux的配置文件转移到Mac时，使用Apple terminal执行命令就出现了： 1update_terminalapp_cwd:5: command not found: omz_urlencode 这样的错误信息，而且伴随着每次命令的执行都会出现。 由于我之前一直在Linux使用kitty作为终端，我也在Mac上下载了它。在kitty中执行命令是就没有出现问题。这让我感觉到很奇怪，我查阅了一些资料，直到看到了这段源码： termsupport.zsh 而且我的zinit正好加载了这个内容。剩下的就是搜索一下源码，找到这个遗失的函数的定义位置，将其加载进来即可。 需要加载的文件为： 1zi snippet OMZL::functions.zsh UPDATE今天用Linux的时候偶然发现不止Apple terminal会报这个错误，其他一些terminal也会报这个问题。 比如konsole以及gnome terminal。同样上述方法也可以解决。","categories":[],"tags":[]},{"title":"好久没写，做个总结","slug":"好久没写，做个总结","date":"2022-11-30T09:06:36.000Z","updated":"2023-10-21T15:50:03.565Z","comments":true,"path":"2022/11/30/好久没写，做个总结/","link":"","permalink":"http://example.com/2022/11/30/%E5%A5%BD%E4%B9%85%E6%B2%A1%E5%86%99%EF%BC%8C%E5%81%9A%E4%B8%AA%E6%80%BB%E7%BB%93/","excerpt":"","text":"python抓包scapy 抓包工具123 dpkt 内容分析kubernetes挂载configmap相关问题使用configmap可以使用volume和volume mount进行挂载，具体的还涉及重写整个文件夹还是只添加一个文件（subpath）。但是挂载上去的文件始终没有写权限，即使setmode:0777（十六进制或十进制544吧？），在容器内看也都是有权限的，但是没用。最后就cp一份出来再写。 同时configmap如果使用重写整个文件夹的模式，可以有自动更新挂载的configmap功能，大约10s一次。 python多进程、多线程多进程我尝试了去写多进程（并发&#x2F;并行？）运行一个程序，但是进程间通信没完全成功，还有待进一步研究。 多线程现在的操作系统会自动的去分配多线程给多个CPU，所以似乎可以不用多进程。","categories":[{"name":"Daily_life","slug":"Daily-life","permalink":"http://example.com/categories/Daily-life/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/tags/k8s/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"用git的那点事","slug":"用git的那点事","date":"2022-10-25T13:15:40.000Z","updated":"2024-06-10T12:48:29.708Z","comments":true,"path":"2022/10/25/用git的那点事/","link":"","permalink":"http://example.com/2022/10/25/%E7%94%A8git%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/","excerpt":"","text":"git config从头开始讲吧。 首先Github一般情况下是不容易访问的，由于已知原因访问速度极慢，所以一般我们使用代理来访问，本地的git库也同理。但是可能是我机场的问题，我无法通过ssh来push我的代码，因为22号端口被ban掉了，所以我就只能通过https来上传我的代码。 一开始我是在Mac上上传我的代码。在Mac上生成gpg的一个key之后按要求上传上去之后好像就可以正常通过https push代码了，当时也没详细研究，我也对https这部分内容不熟，所以就没怎么在意。 这两天我又把我的Arch Linux装了回来，我想讲其也作为我的一个push代码的设备（主要是整理一些linux下的config文件，以及打算试试自己配dwm）。之后就遇到“究竟如何让git push代码上去”这个问题。 同时我也又回顾了一下Mac下我是怎么做的，才发现Xcode帮助我解决了一些问题，所以我才能正常使用https的git push。 git clone123456789101112131415git submodule init git submodule update git submodule deinit --all git rebase git checkout git reset --hardgit reset --softgit cherrypick git chechoutgit branch -a # 查看所有分支git branch -d &lt;branch_name&gt; # 删除分支 GitHub through proxyUsing SSH over the HTTPS port 背景：使用git上传GitHub一般需要科学上网。如果直接使用ssh的登陆方式可能会被代理服务器拒绝，因为ssh要访问22号端口。","categories":[{"name":"Tech","slug":"Tech","permalink":"http://example.com/categories/Tech/"}],"tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"中国移动光猫桥接","slug":"中国移动光猫桥接","date":"2022-10-15T02:19:39.000Z","updated":"2023-10-19T16:00:00.000Z","comments":true,"path":"2022/10/15/中国移动光猫桥接/","link":"","permalink":"http://example.com/2022/10/15/%E4%B8%AD%E5%9B%BD%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%AB%E6%A1%A5%E6%8E%A5/","excerpt":"","text":"本来想着把家里的软路由配置上，结果没想到这次办的宽带是光猫路由，路由器桥接模式。 这个模式据说是多一次NAT（这块我不确定），导致网络性能下降，我实际测试感觉还可以没差太多，但是我用云原神的时候网络延迟着实不低。 所以我打算进行一下网络结构的改变。 正常情况下，大多是将光猫调整为桥接模式，之后再将路由器设置为拨号上网即可。但是我家这个光猫的软件无法直接更改模式，只能删除wan重新添加，这样问题就很多了。 具体实施情况，我问了一下中国移动的工程师，他们也不会，但是有成功案例，所以还是有希望的。 还是专业的人干专业的事我去年十一折腾了好几天也没成功，弄的精疲力竭的。今年，我直接30元淘宝解决。 今年远程操作改家里网络配置，发现之前我的操作都没啥问题，就是pppoe拨号的密码移动工程师没有正确的告诉我，所以我无法博号上网。我觉得也不怨移动工程师，看他的技术水平，估计他也不知道，态度挺好、挺配合就行呗。 不过也是有之前的经验，所以这次也省了一些事情，比如获取光猫的管理员密码（因为我之前问过了）。","categories":[{"name":"Daily_life","slug":"Daily-life","permalink":"http://example.com/categories/Daily-life/"}],"tags":[{"name":"network","slug":"network","permalink":"http://example.com/tags/network/"}]},{"title":"Node.js","slug":"221012","date":"2022-10-12T11:11:01.000Z","updated":"2024-02-14T15:01:36.350Z","comments":true,"path":"2022/10/12/221012/","link":"","permalink":"http://example.com/2022/10/12/221012/","excerpt":"","text":"Node.js今天对node.js进行了简单的调整，调整如下： 123npm config set proxy http://127.0.0.1:7890npm config set https-proxy http://127.0.0.1:7890npm config set strict-ssl false 解除办法： 12npm config delete proxynpm config delete https-proxy 最后解决办法： 1npm config set puppeteer_skip_chromium_download true -g 看起来npm的代理也是挺麻烦的。 QuanX今天还尝试了一下Quanx做HTTP、SOCKS5代理服务器，可以也挺好用的。","categories":[],"tags":[]},{"title":"MacOS的代理那些事","slug":"MacOS的代理那些事","date":"2022-10-11T05:50:20.000Z","updated":"2024-02-09T10:05:53.558Z","comments":true,"path":"2022/10/11/MacOS的代理那些事/","link":"","permalink":"http://example.com/2022/10/11/MacOS%E7%9A%84%E4%BB%A3%E7%90%86%E9%82%A3%E4%BA%9B%E4%BA%8B/","excerpt":"","text":"我是从Windows转Linux再转MacOS的。 Windows近几年Windwos下的代理挺方便的，已经基本抛弃了之前的SSR之类的软件了，主用一个clash for windows就能无脑的解决大部分问题，它还提供TUN模式着实是挺好用的。 Archlinux后来看着Archlinux的自由多彩就转手去了Linux，中间也简单用过一段时间其他的发行版（毕竟当时想找跟得上时代安装教程还是挺费事的，后来才意识到官网的重要性），比如Ubuntu、Manjaro。从这开始我开始逐步接触Linux下的代理，其实同时期由于手上有了一个树莓派，所以也开始接触软路由等内容，但是不深。 Linux下的代理相比于windows就要复杂不少。也有clash，但是我不推荐使用，clash使用的是系统代理的方式，并不能代理所有的情况，比如terminal的代理就不走系统代理。配置terminal的代理也会在某些命令上不好用。 所以Linux下推荐全局代理、或者叫透明代理，软件主要是v2ray（clash也可以，只要你会自己配），之前有一个v2ray的套壳由于核心作者与部分成员闹掰了不再更新了（我甚至忘记了它的名字），我是不推荐使用。我比较推荐v2raya这个软件，方便快捷，也有缺点，支持的加密方式相对少，我之前就是因为机场加密变了导致无法继续使用。 MacOS现在我使用MacOS，说实在就是馋它的生态，我有iPad、iPhone还办了iCloud，用起来还是非常舒服的。 但是MacOS也有很多不尽如人意的地方，由于我是从Linux转过来的，虽然都是Unix-like系统还是有很多不同的，有很多指令就不再适用，需要时间去适应，而且也不实用，毕竟服务器大多是Linux，Mac就很独树一帜。 MacOS上的代理有很多，之前在Linux上比较难设置的clash也有ClashX以及clash for windows可以使用，配置方式也更加图形化。但是问题也与Linux上的情况一致，无法自动配置全局代理。这时候我又想起来v2raya了，但是很遗憾v2raya在这里也不支持。这样我就没有什么好办法进行全局代理了。 接下来，我还是想了一些办法的，有一些我还没有去尝试过。 使用proxychain去链clash server，不知道效果会如何。 最简单的办法就是弄一个软路由插在路由器上，这样非常方便，而且基本上一劳永逸，还可以有很多有趣的功能。 我详细讲讲吧，软路由有两种方式，一个是直接设置成网关，把路由器的网关IP直接指到软路由上，软路由的网关再指回路由器，同时建议关闭路由器的DHCP server，在软路由上开启，这样能进一步降低路由器的工作负担。这种情况所有连接到此wifi下的设备就都可以直接走代理了。 还有一种办法，就是在每台需要走代理的设备上手动配置网关，这样能节省一部分步骤，直接将软路由连接路由器即可，缺点就是每个设备都得手动配置，挺麻烦的。优点就是路由器上不用改太多，登不上路由器应该也可以使用。 但是最近我没有弄成，有两个原因。首先，在自己家里，我办了中国移动的宽带，然而这个玩意的光猫是路由模式，而且工程师都不会改桥接模式，emmm，这导致第一种办法改网关什么的，无了。而且我还不喜欢第二种，嫌麻烦。其次，我现在在外工作，居住的地方的wifi后台轻易无法登陆，这也就直接导致第一种方案作废，但是好处是我在外的设备有限，第二种方案也是不错的选择（但是软路由放家里了）。 现在手上没有什么能做软路由的设备了，只能研究下一步了。虚拟机、容器。我手上有电脑，如果使用虚拟机来做软路由也是不错的选择呗，但是问题又来了，M1的Mac在虚拟机下是否能运行Openwrt呢？这个我还没有尝试，甚至虚拟机软件我还没想好用什么。之后想到最近自己工作中使用的容器，我想使用Docker是不是能更方便更快捷的实现这个功能呢？我去找了Openwrt的image，也成功找到了，但是运行上有一些问题，Docker的网络大体上有那么4种可以选，符合我预期的需要使用macvlan，虽然macvlan性能相对一般，但至少能用。可惜的是M1的Mac似乎不支持macvlan，或者我没有开这个功能，我还没有想好该如何去继续完成。 今天想到的就这些了。 OpenWRT软路由代理系统代理透明代理技术相关文章浅谈在代理环境中的 DNS 解析行为","categories":[{"name":"Daily_life","slug":"Daily-life","permalink":"http://example.com/categories/Daily-life/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"http://example.com/tags/macOS/"}]},{"title":"VPP and Pktgen","slug":"VPP and Pktgen","date":"2022-09-26T12:01:47.000Z","updated":"2023-07-03T16:12:01.835Z","comments":true,"path":"2022/09/26/VPP and Pktgen/","link":"","permalink":"http://example.com/2022/09/26/VPP%20and%20Pktgen/","excerpt":"","text":"VPPvpp是一个大三层的交换机，内部操作与交换机类似。 123456show intshow hardwareshow runshow threadclear interfacesshow ? Pktgen-DBDKPktgen是一个打流软件，应该是linux原生的（记不清了），它支持lua语言，也有自己的一套语言（感觉就是特化的C）。最近看了一下将Pktgen打包成image，也把lua的功能加上了，最开始出现了一些问题，后来发现是没有指定版本而导致的不兼容，指定版本后就好了。 找机会把那段代码拷下来，嘿嘿。 主要用到的知识是Docker的Dockerfile吧 12docker","categories":[],"tags":[]},{"title":"零碎内容","slug":"220920","date":"2022-09-21T01:43:06.000Z","updated":"2023-10-21T12:59:09.797Z","comments":true,"path":"2022/09/21/220920/","link":"","permalink":"http://example.com/2022/09/21/220920/","excerpt":"","text":"UTCUTC全称Coordinated Universal Time，中文译名协调世界时。 在linux系统中有时候需要看其UTC时间 &#96;&#96;","categories":[],"tags":[]},{"title":"Shell编程的一点基础内容","slug":"Shell编程的一点基础内容","date":"2022-09-19T05:46:08.000Z","updated":"2023-10-25T14:43:44.590Z","comments":true,"path":"2022/09/19/Shell编程的一点基础内容/","link":"","permalink":"http://example.com/2022/09/19/Shell%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E7%82%B9%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/","excerpt":"","text":"Shell今天学习了一点shell编程，根据mentor提供的一个shell脚本进行更改实现自动定时抓Pod包的功能。 学习到的内容如下： shell创建文件自带时间 1touch $(date +%y%m%d).cap shell对后台运行的进程进行kill 1kill -9 PID shell将grep的内容选取其中一列 1awk -F &#x27; &#x27; &#x27;&#123;print $5&#125;&#x27; 使用awk取某一行数据中的倒数第N列：$(NF-(n-1)) 比如取&#x2F;etc&#x2F;passwd文件中的第2列、倒数第1、倒数第2、倒数第4列（以冒号为分隔符）。（$NF表示倒数第一列，$(NF-1)表示倒数第二列） 参考文献：awk的一些用法 如果不存在，则创建一个文件夹 12345if [ ! -d capFiles ]; then mkdir capFileselse echo &#x27;dir exist&#x27;fi if语句 12345678910111213if ((1 &gt; 0)); then ...else ...fiif ((1 &gt; 0)); then ...elif; then ...else ...fi 循环结构 1234while conditiondo ......done","categories":[{"name":"Tech","slug":"Tech","permalink":"http://example.com/categories/Tech/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://example.com/tags/shell/"}]},{"title":"使用ssh在后台运行程序","slug":"使用ssh在后台运行程序","date":"2022-09-19T05:37:27.000Z","updated":"2023-10-21T15:45:10.583Z","comments":true,"path":"2022/09/19/使用ssh在后台运行程序/","link":"","permalink":"http://example.com/2022/09/19/%E4%BD%BF%E7%94%A8ssh%E5%9C%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"使用ssh在后台运行程序方法之一：使用nohupnohup可以使后面的命令不会响应挂断（SIGHUP）信号。也就是说，通过远程登录执行nohup命令后，即使退出登录后，程序还是会正常执行。通常情况下，nohup命令最后会跟上&amp;字符，表示将这个命令放至后台执行，这样才能真正做到将这个命令放至后台持续的执行。具体示例如下所示。 提示：nohup通常用于执行无干预的自动化程序或脚本，无法完成带有交互的操作。 执行如下命令，每秒输出一行信息。bash hello.sh系统显示类似如下。 在命令头尾分别加上nohup和&amp;，如下所示，可以看到nohup输出了一行信息，再按一下回车键就跳回了Shell命令行，此时命令已经在后台执行了，nohup将命令的输出重定向至当前目录的nohup.out文件中。同时注意到nohup会将对应程序的PID输出，PID可用于需要中断进程时结束进程。 nohup bash hello.sh &amp; 系统显示类似如下。 通过如下命令，可以持续的查看nohup.out的输出，达到监视程序的效果。 tail -f nohup.out 在命令中也可以使用重定向将程序的输出改为自己想要的文件名，如下所示，则程序的输出就会写到hello.log文件中。 nohup bash hello.sh &gt;hello.log &amp; 若程序不会自动退出，那么此时需要使用kill命令来结束进程。例如，可以使用如下命令，结束进程。 kill -TRM [$PID] 说明：[$PID]为之前nohup命令输出的值。 参考文献： Linux系统SSH客户端断开后保持进程继续运行配置方法","categories":[{"name":"Tech","slug":"Tech","permalink":"http://example.com/categories/Tech/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://example.com/tags/shell/"},{"name":"ssh","slug":"ssh","permalink":"http://example.com/tags/ssh/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-09-15T10:16:40.027Z","updated":"2023-10-21T12:50:25.245Z","comments":true,"path":"2022/09/15/hello-world/","link":"","permalink":"http://example.com/2022/09/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server12$ hexo server$ hexo s More info: Server Generate static files12$ hexo generate$ hexo g More info: Generating Deploy to remote sites12$ hexo deploy$ hexo d More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Tech","slug":"Tech","permalink":"http://example.com/categories/Tech/"},{"name":"Daily_life","slug":"Daily-life","permalink":"http://example.com/categories/Daily-life/"}],"tags":[{"name":"C","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"Game","slug":"Game","permalink":"http://example.com/tags/Game/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://example.com/tags/LeetCode/"},{"name":"Unix","slug":"Unix","permalink":"http://example.com/tags/Unix/"},{"name":"k8s","slug":"k8s","permalink":"http://example.com/tags/k8s/"},{"name":"cloud_native","slug":"cloud-native","permalink":"http://example.com/tags/cloud-native/"},{"name":"Pi","slug":"Pi","permalink":"http://example.com/tags/Pi/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"LineageOS","slug":"LineageOS","permalink":"http://example.com/tags/LineageOS/"},{"name":"android","slug":"android","permalink":"http://example.com/tags/android/"},{"name":"刷机","slug":"刷机","permalink":"http://example.com/tags/%E5%88%B7%E6%9C%BA/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"network","slug":"network","permalink":"http://example.com/tags/network/"},{"name":"macOS","slug":"macOS","permalink":"http://example.com/tags/macOS/"},{"name":"shell","slug":"shell","permalink":"http://example.com/tags/shell/"},{"name":"ssh","slug":"ssh","permalink":"http://example.com/tags/ssh/"}]}